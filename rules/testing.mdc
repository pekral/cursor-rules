---
description: 
globs: 
alwaysApply: true
---
## Analysis before writing tests
- Project using Pest testing framework (read actual version from composer.json file)
- Analyze the new code in the tests and try to make the code as simple and readable as possible, but leave the critical parts of the code under test.
- Before generating the code, analyze the class for which the tests are being updated thoroughly
- If there are already some test cases, follow the concept of written tests for this class
- If you write new tests for a non-existing test class (the class extends TestCase::class), always write them as simply as possible. As a sample test, NowTriggerTest::class is the one to parse and follow the same convention of this test
- Before writing tests, always thoroughly analyze the file and classes for which you are writing tests.
- Never modify logic outside of tests!
- Analysis of the structure of test cases: Study all functions and files ending in TestCase.php in the tests/ folder to understand the structure of the test cases.

## Mocking
- Mocking is done using Mockery::class.
- Create mocks only for services or classes that use third-party services (http api request, http client) to retrieve data. Never use mocks otherwise!

## Asserts
- Assert only values from the tested class or method

## Generated code
- Data provider must be defined via argument not phpdoc block.
- Use data providers if you can and it will simplify writing and readability
- Never create Test class property, prefer local variables!
- Never edit logic out of tests!
- Everytime run new tests a repair errors!
- testing data create in english language
- Never create tests (and asserts too) for abstract classes, protected or private properties.
- Generate phpdocs for variables when it comes to factory model and variable is using
- Always write tests as simply and human-readable as possible.
- Mark the test class as final
- Never write tests for protected and private methods and properties!

## Code coverage
- Code coverage must be 100%!
- Check code coverage only for changes
- Generate coverage in Clover XML report and analyse it.
- Analyse coverage content via cat command a read report data

## Running tests
- Run tests only for changed files, find the tests before testing and check only for those found tests

## After create or modify tests
- If there is a file with code coverage, delete it.
- After generating the code, check that you have followed all the defined rules for writing the test in the .cursoreditor/rules/testing.mdc configuration file. If not, check the broken rules and modify them to meet all the rules!
- Delete unnecessary comments
- Do code review



